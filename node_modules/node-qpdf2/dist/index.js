"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = exports.encrypt = void 0;
const util_1 = require("util");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const execFilePromise = util_1.promisify(child_process_1.execFile);
const existsPromise = util_1.promisify(fs_1.existsSync);
const hyphenate = (variable) => variable.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
const execute = async (callArguments) => {
    const { stderr, stdout } = await execFilePromise("qpdf", callArguments);
    if (stderr) {
        throw new Error(stderr);
    }
    return stdout;
};
const fileExists = async (file) => {
    if (await existsPromise(file)) {
        return true;
    }
    return false;
};
exports.encrypt = async (input, options, output) => {
    if (!input)
        return "Please specify input file";
    const doesFileExist = await fileExists(input);
    if (!doesFileExist)
        return "Input file doesn't exist";
    const callArguments = ["--encrypt"];
    if (typeof options.password === "object") {
        if (options.password.user === undefined ||
            options.password.user === null ||
            options.password.owner === undefined ||
            options.password.owner === null) {
            return "Please specify both owner and user passwords";
        }
        callArguments.push(options.password.user);
        callArguments.push(options.password.owner);
    }
    else {
        callArguments.push(options.password);
        callArguments.push(options.password);
    }
    options.keyLength = options.keyLength || 256;
    callArguments.push(options.keyLength.toString());
    if (options.restrictions) {
        if (typeof options.restrictions !== "object")
            return "Invalid Restrictions";
        const { restrictions } = options;
        for (const restriction of options.restrictions) {
            const value = restrictions[restriction] !== "" ? `=${restrictions[restriction]}` : "";
            callArguments.push(`--${hyphenate(restriction)}${value}`);
        }
    }
    callArguments.push("--");
    callArguments.push(input.replace(/([\s"$'\\`])/g, "\\$1"));
    if (output) {
        callArguments.push(output);
    }
    else {
        callArguments.push("-");
    }
    return execute(callArguments);
};
exports.decrypt = async (input, password, output) => {
    if (!input)
        return "Please specify input file";
    if (!password)
        return "Password missing";
    const callArguments = ["--decrypt"];
    callArguments.push(`--password=${password.replace(/([\s"$'\\`])/g, "\\$1")}`);
    callArguments.push(input.replace(/([\s"$'\\`])/g, "\\$1"));
    if (output) {
        callArguments.push(output);
    }
    else {
        callArguments.push("-");
    }
    return execute(callArguments);
};
